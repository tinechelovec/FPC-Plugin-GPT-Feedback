import os
import json
import time
import random
import logging
import g4f

from FunPayAPI.updater.events import NewMessageEvent
from locales.localizer import Localizer
from tg_bot import keyboards
from telebot.types import Message, InlineKeyboardButton

logger = logging.getLogger(f"FPC.{__name__}")

PREFIX = '[GPT Consultant]'

def log(msg):
    logger.info(f"{PREFIX} {msg}")

NAME = "GPT Info"
VERSION = "1.1"
DESCRIPTION = "GPT-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞."
UUID = "6b2c95ba-95e6-46e0-ae1c-84083993715c"
SETTINGS_PAGE = False
CREDITS = "@tinechelovec"

log("–ó–∞–ø—É—Å—Ç–∏–ª –ø–ª–∞–≥–∏–Ω GPT-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ (v1.1)")

PLUGIN_FOLDER = "storage/plugins/gpt_info"
DATA_FILE = os.path.join(PLUGIN_FOLDER, "data.json")
os.makedirs(PLUGIN_FOLDER, exist_ok=True)
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({"enabled": True, "command": "#info"}, f, indent=4, ensure_ascii=False)

def load_data() -> dict:
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è data.json: {e}")
        return {"enabled": True, "command": "#info"}

def save_data(data: dict):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ data.json: {e}")


try:
    orig_edit_plugin = keyboards.edit_plugin
    def custom_edit_plugin(c, uuid, offset=0, ask_to_delete=False):
        kb = orig_edit_plugin(c, uuid, offset, ask_to_delete)
        if uuid == UUID:
            dev_btn = InlineKeyboardButton(text="üëΩ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", url=f"https://t.me/{CREDITS[1:]}")
            kb.keyboard[0] = [dev_btn]
        return kb
    keyboards.edit_plugin = custom_edit_plugin
except Exception:
    pass

def generate_gpt_response(prompt: str, max_attempts: int = 10, min_delay: float = 0.5, max_delay: float = 1.5) -> str | None:
    for attempt in range(1, max_attempts + 1):
        try:
            log(f"g4f: –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}")
            response = g4f.ChatCompletion.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}]
            )
            if not isinstance(response, str):
                response = str(response)
            response = response.strip()

            if "Login to continue using" in response or "login to continue using" in response.lower():
                log(f"g4f: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}), –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                time.sleep(random.uniform(min_delay, max_delay))
                continue

            return response

        except Exception as e:
            logger.error(f"[g4f] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
            logger.debug("TRACEBACK", exc_info=True)
            time.sleep(random.uniform(min_delay, max_delay))
            continue

    return None

def gpt_info_handler(cardinal, e: NewMessageEvent):
    data = load_data()
    enabled = data.get("enabled", True)
    command = data.get("command", "#info")

    if not enabled:
        return

    message = e.message
    if not message.text:
        return


    if message.text.strip().lower() != command.lower():
        parts = message.text.strip().split(maxsplit=1)
        if parts and parts[0].lower() != command.lower():
            return

    log(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} (—á–∞—Ç {message.chat_id})")

    text = message.text.strip()
    parts = text.split(maxsplit=2)
    lot_id = None
    question = ""
    if len(parts) >= 2 and parts[1].isdigit():
        lot_id = int(parts[1])
        question = parts[2] if len(parts) > 2 else ""
    else:
        if len(parts) >= 2:
            question = parts[1] if len(parts) == 2 else parts[1] + (" " + parts[2] if len(parts) > 2 else "")
        else:
            question = ""

    if not lot_id:
        try:
            chat = cardinal.account.get_chat(message.chat_id, False)
            if chat and getattr(chat, "looking_link", None):
                lot_id = chat.looking_link.split("=")[-1]
            else:
                cardinal.send_message(message.chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ª–æ—Ç–∞.")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ—Ç–∞: {e}")
            cardinal.send_message(message.chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ª–æ—Ç–∞.")
            return

    log(f"ID —Ç–æ–≤–∞—Ä–∞: {lot_id}, –í–æ–ø—Ä–æ—Å: {question}")

    try:
        lot_fields = cardinal.account.get_lot_fields(lot_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–π –ª–æ—Ç–∞ {lot_id}: {e}")
        cardinal.send_message(message.chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.")
        return

    title = getattr(lot_fields, "title_ru", None) or getattr(lot_fields, "title_en", None) or "[–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ]"
    description = getattr(lot_fields, "description_ru", None) or getattr(lot_fields, "description_en", None) or "[–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ]"
    price = getattr(lot_fields, "price", "‚Äî")

    prompt = (
        f"–ü—Ä–∏–≤–µ—Ç! –¢—ã - –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –Ω–∞—à–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –∏–≥—Ä–æ–≤—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π. "
        "–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –¥–µ—Ç–∞–ª–∏ –∏ —Å–æ—Å—Ç–∞–≤–∏–º –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.\n\n"
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n\n"
    )

    if question:
        prompt += f"–í–æ–ø—Ä–æ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {question}\n–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–µ–≥–æ.\n\n"
    else:
        prompt += "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —Ç–æ–≤–∞—Ä–µ, –µ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö.\n\n"

    prompt += (
        "- –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –≤ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–º —Ç–æ–Ω–µ.\n"
        "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏.\n"
        "- –ö—Ä–∞—Å–∏–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã.\n"
        "- –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ ‚Äî –¥–æ ~670 —Å–∏–º–≤–æ–ª–æ–≤.\n"
    )

    response = generate_gpt_response(prompt, max_attempts=5)
    if response is None:
        cardinal.send_message(message.chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.")
        return

    cardinal.send_message(message.chat_id, response)
    log("–û—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é")

user_states = {}

def set_command_start(message: Message, cardinal):
    uid = message.chat.id
    user_states[uid] = {"step": "set_command"}
    cardinal.telegram.bot.send_message(uid, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å GPT (–Ω–∞–ø—Ä–∏–º–µ—Ä: #info –∏–ª–∏ !gpt).")

def toggle_plugin_cmd(message: Message, cardinal):
    data = load_data()
    data["enabled"] = not data.get("enabled", True)
    save_data(data)
    state = "–≤–∫–ª—é—á—ë–Ω" if data["enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω"
    cardinal.telegram.bot.send_message(message.chat.id, f"–ü–ª–∞–≥–∏–Ω —Ç–µ–ø–µ—Ä—å {state}.")

def show_config_cmd(message: Message, cardinal):
    data = load_data()
    enabled = data.get("enabled", True)
    cmd = data.get("command", "#info")
    cardinal.telegram.bot.send_message(message.chat.id, f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ GPT:\n–í–∫–ª—é—á–µ–Ω: {enabled}\n–ö–æ–º–∞–Ω–¥–∞: <code>{cmd}</code>", parse_mode="HTML")

def handle_fsm_step(message: Message, cardinal):
    chat_id = message.chat.id
    if chat_id not in user_states:
        return

    text = message.text.strip()

    if text.startswith("/"):
        user_states.pop(chat_id)
        cardinal.telegram.bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    state = user_states[chat_id]

    if state["step"] == "set_command":
        new_cmd = text.strip()
        if not new_cmd:
            cardinal.telegram.bot.send_message(chat_id, "–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            user_states.pop(chat_id)
            return
        if new_cmd.startswith("/"):
            cardinal.telegram.bot.send_message(chat_id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '/'. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, #info –∏–ª–∏ !gpt.")
            user_states.pop(chat_id)
            return

        data = load_data()
        data["command"] = new_cmd
        save_data(data)
        cardinal.telegram.bot.send_message(chat_id, f"–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ GPT –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <code>{new_cmd}</code>", parse_mode="HTML")
        user_states.pop(chat_id)
        return

def init_cardinal(cardinal):
    tg = cardinal.telegram
    tg.msg_handler(lambda m: set_command_start(m, cardinal), commands=["setgptcmd"])
    tg.msg_handler(lambda m: toggle_plugin_cmd(m, cardinal), commands=["gpttoggle"])
    tg.msg_handler(lambda m: show_config_cmd(m, cardinal), commands=["gptshow"])
    tg.msg_handler(lambda m: handle_fsm_step(m, cardinal), func=lambda m: m.chat.id in user_states)

    cardinal.add_telegram_commands(UUID, [
        ("setgptcmd", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è GPT", True),
        ("gpttoggle", "–í–∫–ª/–≤—ã–∫–ª GPT-–ø–ª–∞–≥–∏–Ω", True),
        ("gptshow", "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GPT", True)
    ])

BIND_TO_PRE_INIT = [init_cardinal]
BIND_TO_NEW_MESSAGE = [gpt_info_handler]
BIND_TO_DELETE = []
